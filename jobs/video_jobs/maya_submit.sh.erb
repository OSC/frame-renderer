#!/bin/sh

#set the resources requests. Job name, time, nodes and cores per task, task count 

#PBS -l nodes=1:ppn=<%= cores %>
#PBS -j oe

# TMPDIR currently set to something like /tmp/pbstmp.7431620[1] (unescaped)
# and Maya cannot read filepaths like that correctly.
JOB_TMPDIR=$TMPDIR
DIR_BINDS="$JOB_TMPDIR:/tmp"
# set a new tmpdir bc that's what the container needs to look at
export TMPDIR="/tmp"

function create_thumbnails(){
  RESIZE="-resize 80x80"
  #IMG_EXTRA_ARGS="-auto-gamma"
  IMG_ARGS="$RESIZE $IMG_EXTRA_ARGS"

  IMG_DIR="<%= project_dir %>/images"
  THUMB_DIR="<%= project_dir %>/thumbnails"

  mkdir $THUMB_DIR 2>/dev/null

  for IMG in $(ls <%= project_dir %>/images 2>/dev/null)
  do
    BASE_IMG_NAME=${IMG##*/}
    IMG_NAME=${BASE_IMG_NAME%.*}

    convert $IMG_DIR/$IMG $IMG_ARGS $THUMB_DIR/$IMG_NAME.png
  done
}

function start_frame(){
  if [ -z "$PBS_ARRAYID" ]; then
    PBS_ARRAYID=1
  fi
  
  if [ $PBS_ARRAYID -gt 1 ]; then
    # if nodes >1 have to offset +1 so the start frame of this task
    # doesn't overlap with the end frame of the previous task
    TASK_START_FRAME=$(( OFFSET - TASK_SIZE + START_FRAME + 1 ))
  elif [ "$NODES" != "1" ]; then
    TASK_START_FRAME=$(( OFFSET - TASK_SIZE + START_FRAME ))
  else
    TASK_START_FRAME=$START_FRAME
  fi

  echo $TASK_START_FRAME
}

function end_frame(){

  if [ $REMAINDER -ne 0 ] && [ "$PBS_ARRAYID" -eq "$NODES" ]; then
    # last task picks up the remainder of the frames
    TASK_END_FRAME=$(( OFFSET + START_FRAME + REMAINDER ))
  elif [ "$NODES" != "1" ]; then
    TASK_END_FRAME=$(( OFFSET + START_FRAME ))
  else
    TASK_END_FRAME=$END_FRAME
  fi

  echo $TASK_END_FRAME
}

echo "starting at $(date)"

#load the singularity and ACCAD modules and record the loaded module list
module use /usr/local/share/lmodfiles/project/osc
module load singularity/current
module use /usr/local/share/lmodfiles/project/ACCAD
module load maya/2018-ACCAD

# set all the different variables you'll need 
CMD="singularity exec -B $DIR_BINDS $MAYA_IMG Render"
RENDERER="<%= renderer %>"
EXTRA_ARGS="<%= extra %>"
FILE="<%= file %>"
PRJ_DIR="<%= project_dir %>"
SKIP_EXISTING="-skipExistingFrames <%= skip_existing %>"


export NODES=<%= nodes %>
export START_FRAME="<%= start_frame %>"
export END_FRAME="<%= end_frame %>"
export TOTAL_FRAMES=$(( END_FRAME - START_FRAME ))
export TASK_SIZE=$(( TOTAL_FRAMES / NODES ))
export REMAINDER=$(( TOTAL_FRAMES % NODES ))
export OFFSET=$(( PBS_ARRAYID * TASK_SIZE ))

ARGS="-r $RENDERER $SKIP_EXISTING ${EXTRA_ARGS} -proj $PRJ_DIR -s $(start_frame) -e $(end_frame) $FILE"

echo "executing: $CMD $ARGS"
echo "on host: $(hostname)"
echo "with modules:"
module list

# now let's actually execute and grab the end status
${CMD} ${ARGS}
STATUS=$?

echo "ended at $(date)"
echo "ended with status $STATUS"

if [ $STATUS -eq 0 ]; then
  echo "now creating thumbnails"
  time create_thumbnails
fi


exit $STATUS
